#!/usr/bin/env python3
# SPDX-FileCopyrightText: Omar Sandoval <osandov@osandov.com>
# SPDX-License-Identifier: MIT

import argparse
import struct
import sys

TYPES = {
    # Generated by
    # awk 'match($0, /^\s*#\s*define\s+(AT_[^[:space:]]+)\s+([^[:space:]]+)/, arr) { print "    " arr[2] ": \"" arr[1] "\"," }' /usr/include/elf.h
    0: "AT_NULL",
    1: "AT_IGNORE",
    2: "AT_EXECFD",
    3: "AT_PHDR",
    4: "AT_PHENT",
    5: "AT_PHNUM",
    6: "AT_PAGESZ",
    7: "AT_BASE",
    8: "AT_FLAGS",
    9: "AT_ENTRY",
    10: "AT_NOTELF",
    11: "AT_UID",
    12: "AT_EUID",
    13: "AT_GID",
    14: "AT_EGID",
    17: "AT_CLKTCK",
    15: "AT_PLATFORM",
    16: "AT_HWCAP",
    18: "AT_FPUCW",
    19: "AT_DCACHEBSIZE",
    20: "AT_ICACHEBSIZE",
    21: "AT_UCACHEBSIZE",
    22: "AT_IGNOREPPC",
    23: "AT_SECURE",
    24: "AT_BASE_PLATFORM",
    25: "AT_RANDOM",
    26: "AT_HWCAP2",
    31: "AT_EXECFN",
    32: "AT_SYSINFO",
    33: "AT_SYSINFO_EHDR",
    34: "AT_L1I_CACHESHAPE",
    35: "AT_L1D_CACHESHAPE",
    36: "AT_L2_CACHESHAPE",
    37: "AT_L3_CACHESHAPE",
    40: "AT_L1I_CACHESIZE",
    41: "AT_L1I_CACHEGEOMETRY",
    42: "AT_L1D_CACHESIZE",
    43: "AT_L1D_CACHEGEOMETRY",
    44: "AT_L2_CACHESIZE",
    45: "AT_L2_CACHEGEOMETRY",
    46: "AT_L3_CACHESIZE",
    47: "AT_L3_CACHEGEOMETRY",
    51: "AT_MINSIGSTKSZ",
}


def main():
    parser = argparse.ArgumentParser(description="parse an auxiliary vector (e.g., /proc/$pid/auxv) from standard input")
    parser.add_argument("size", type=int, nargs="?", default=struct.calcsize("L"), help="size of vector types and values (default: sizeof(unsigned long))")
    parser.add_argument("byteorder", choices=["little", "big"], nargs="?", default=sys.byteorder, help="endianness of types and values (default: system endianness)")
    args = parser.parse_args()

    while True:
        buf = sys.stdin.buffer.read(2 * args.size)
        if len(buf) < 2 * args.size:
            break
        type = int.from_bytes(buf[:args.size], args.byteorder)
        value = int.from_bytes(buf[args.size:], args.byteorder)
        print(f"{TYPES.get(type, type)}: {value:#x} = {value}")


if __name__ == "__main__":
    main()
